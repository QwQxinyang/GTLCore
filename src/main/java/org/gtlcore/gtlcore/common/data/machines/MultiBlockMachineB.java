package org.gtlcore.gtlcore.common.data.machines;

import org.gtlcore.gtlcore.GTLCore;
import org.gtlcore.gtlcore.api.machine.multiblock.CoilWorkableElectricMultipleRecipesMultiblockMachine;
import org.gtlcore.gtlcore.api.machine.multiblock.WorkableElectricParallelHatchMultipleRecipesMachine;
import org.gtlcore.gtlcore.common.data.*;
import org.gtlcore.gtlcore.common.machine.multiblock.noenergy.PrimitiveOreMachine;
import org.gtlcore.gtlcore.common.machine.multiblock.water.*;
import org.gtlcore.gtlcore.config.GTLConfigHolder;
import org.gtlcore.gtlcore.utils.Registries;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.RotationState;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.CoilWorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.machine.multiblock.WorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.api.recipe.OverclockingLogic;
import com.gregtechceu.gtceu.common.data.*;

import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.material.Fluids;

import static org.gtlcore.gtlcore.api.registries.GTLRegistration.REGISTRATE;

@SuppressWarnings("unused")
public class MultiBlockMachineB {

    public static void init() {}

    public final static MultiblockMachineDefinition PRIMITIVE_VOID_ORE = GTLConfigHolder.INSTANCE.enablePrimitiveVoidOre ?
            REGISTRATE.multiblock("primitive_void_ore", PrimitiveOreMachine::new)
                    .langValue("Primitive Void Ore")
                    .tooltips(Component.literal("运行时根据维度每tick随机产出一组任意粗矿"))
                    .tooltips(Component.literal("支持主世界,下界,末地"))
                    .rotationState(RotationState.ALL)
                    .recipeType(GTLRecipeTypes.PRIMITIVE_VOID_ORE_RECIPES)
                    .appearanceBlock(() -> Blocks.DIRT)
                    .pattern(definition -> FactoryBlockPattern.start()
                            .aisle("XXX", "XXX", "XXX")
                            .aisle("XXX", "XAX", "XXX")
                            .aisle("XXX", "XSX", "XXX")
                            .where('S', Predicates.controller(Predicates.blocks(definition.get())))
                            .where('X', Predicates.blocks(Blocks.DIRT).or(Predicates.abilities(PartAbility.EXPORT_ITEMS)).or(Predicates.abilities(PartAbility.IMPORT_FLUIDS)))
                            .where('A', Predicates.air())
                            .build())
                    .workableCasingRenderer(new ResourceLocation("minecraft", "block/dirt"), GTCEu.id("block/multiblock/gcym/large_extractor"))
                    .register() :
            null;

    public final static MultiblockMachineDefinition LARGE_BENDER_AND_FORMING = REGISTRATE
            .multiblock("large_bender_and_forming", WorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.6))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_3.tooltip",
                    Component.translatable("gtceu.bender"), Component.translatable("gtceu.cluster"), Component.translatable("gtceu.rolling")))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.BENDER_RECIPES, GTLRecipeTypes.ROLLING_RECIPES, GTLRecipeTypes.CLUSTER_RECIPES)
            .recipeModifiers(GTLRecipeModifiers.GCYM_REDUCTION, GTRecipeModifiers.PARALLEL_HATCH,
                    GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GCyMBlocks.CASING_STRESS_PROOF)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXX", "XXXX", "XXXX")
                    .aisle("XXXX", "XGGX", "XXXX")
                    .aisle("XXXX", "XPPX", "XXXX")
                    .aisle("XXXX", "XGGX", "XXXX")
                    .aisle("XXXX", "XSXX", "XXXX")
                    .where('S', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('X', Predicates.blocks(GCyMBlocks.CASING_STRESS_PROOF.get()).setMinGlobalLimited(40)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, false, true)))
                    .where('G', Predicates.blocks(GTBlocks.CASING_STEEL_GEARBOX.get()))
                    .where('P', Predicates.blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('A', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/stress_proof_casing"), GTCEu.id("block/multiblock/gcym/large_material_press"))
            .register();

    public final static MultiblockMachineDefinition GRAVITATION_SHOCKBURST = REGISTRATE.multiblock("gravitation_shockburst", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.GRAVITATION_SHOCKBURST_RECIPES)
            .recipeType(GTLRecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.gravitation_shockburst"), Component.translatable("gtceu.electric_implosion_compressor")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.CREATE_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcc ccb ", " bc   cb ", " bcc ccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .where("a", Predicates.blocks(GTLBlocks.CREATE_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.OPTICAL_DATA_RECEPTION).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1)))
                    .where("b", Predicates.blocks(GTLBlocks.INFINITY_GLASS.get()))
                    .where("c", Predicates.blocks(Registries.getBlock("avaritia:infinity")))
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/create_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition DIGESTION_TANK = REGISTRATE.multiblock("digestion_tank", CoilWorkableElectricMultiblockMachine::new)
            .langValue("Digestion Tank")
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.digestion_treatment")))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTLRecipeTypes.DIGESTION_TREATMENT)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#OOOOO#", "#YMMMY#", "##YYY##", "#######")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("#OOSOO#", "#YMMMY#", "##YYY##", "#######")
                    .where('S', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('X', Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('K', Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('Y', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('M', Predicates.heatingCoils())
                    .where('O', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, false, true)))
                    .where('A', Predicates.air())
                    .where('#', Predicates.any())
                    .build())
            .beforeWorking((machine, recipe) -> machine instanceof CoilWorkableElectricMultiblockMachine coilMachine && coilMachine.getCoilType().getCoilTemperature() >= recipe.data.getInt("ebf_temp"))
            .additionalDisplay(GTLMachines.TEMPERATURE)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public final static MultiblockMachineDefinition WOOD_DISTILLATION = REGISTRATE.multiblock("wood_distillation", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.WOOD_DISTILLATION_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.wood_distillation")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("ABBBA IIIII IIIII ABBBA", "AAAAA IIIII IIIII AAAAA", "CAAAC CIIIC CIIIC CAAAC", "C   C C   C C   C CCCCC", "CCCCC C   C C   C CAAAC", "CAAAC C   C CCCCC C   C", "C   C CCCCC CJJJC CAAAC", "CAAAC CJJJC CJJJC C   C", "C   C CJJJC CJJJC CAAAC", "CAAAC CJJJC CBBBC C   C", "C   C CBBBC C   C CBBBC", "CAAAC CCCCC CCCCC CDDDC", "C   C C   C CDDDC CDDDC", "CBBBC CCCCC CDDDC CDDDC", "CDDDC CDDDC CDDDC CCCCC", "CDDDC CDDDC CCCCC      ", "CCCCC CDDDC            ", "      CDDDC            ", "      CCCCC            ", "                       ")
                    .aisle("BBBBB IKKKI IKKKI BBBBB", "AAAAA IKKKI IKKKI AAAAA", "ADDDA IDJDI IDJDI ADDDA", " DDD   DJD   DJD  CDDDC", "CDDDC  DJD   DJDC A   A", "A   A  DJD  CDJDC  EEE ", " EEE  CDJDC J   J A   A", "A   A J   J J   J  EEE ", " EEE  J   J J   J A   A", "A   A J   J B   B  EEE ", " EEE  B   B  DDD  B   B", "A   A CDDDC CDDDC D   D", " EEE   DDD  D   D D   D", "B   B CEEEC D   D D   D", "D   D D   D D   D CDDDC", "D   D D   D CDDDC  DDD ", "CDDDC D   D  DDD       ", " DDD  D   D            ", "      CDDDC            ", "       DDD             ")
                    .aisle("BBBBB IKKKI IKKKI BBBBB", "AAGAA IKGKI IKGKI AAGAA", "ADGDA IJGJI IJGJI ADGDA", " DGD   JGJ   JGJ  CDGDC", "CDGDC  JGJ   JGJC A G A", "A G A  JGJ  CJGJC  EGE ", " EGE  CJGJC J   J A G A", "A G A J   J J   J  EGE ", " EGE  J   J J   J A G A", "A G A J   J B   B  EGE ", " EGE  B   B  DGD  B   B", "A G A CDGDC CDGDC D   D", " EEE   DGD  D   GGD   D", "B   B CEEEC D   D D   D", "D   GGG   D D   D CD DC", "D   D D   D CD DC  DDD ", "CD DC D   D  DDD       ", " DDD  D   D            ", "      CD DC            ", "       DDD             ")
                    .aisle("BBBBB IKKKI IKKKI BBBBB", "AAAAA IKGKI IKGKI AAAAA", "ADDDA IDJDI IDJDI ADDDA", " DDD   DJD   DGD  CDDDC", "CDDDC  DJD   DJDC A   A", "A   A  DJD  CDJDC  EEE ", " EEE  CDJDC J   J A   A", "A   A J   J J   J  EEE ", " EEE  J   J J   J A   A", "A   A J   J B   B  EEE ", " EEE  B   B  DDD  B   B", "A   A CDDDC CDDDC D   D", " EEE   DDD  D   D D   D", "B   B CEEEC D   D D   D", "D   D D   D D   D CDDDC", "D   D D   D CDDDC  DDD ", "CDDDC D   D  DDD       ", " DDD  D   D            ", "      CDDDC            ", "       DDD             ")
                    .aisle("ABBBA IKKKI IKKKI ABBBA", "AAAAA IIGII IIGII AAAAA", "CAAAC CIIIC CIIIC CAAAC", "C   C C   C C   C CCCCC", "CCCCC C   C C   C CAAAC", "CAAAC C   C CCCCC C   C", "C   C CCCCC CJJJC CAAAC", "CAAAC CJJJC CJJJC C   C", "C   C CJJJC CJJJC CAAAC", "CAAAC CJJJC CBBBC C   C", "C   C CBBBC C   C CBBBC", "CAAAC CCCCC CCCCC CDDDC", "C   C C   C CDDDC CDDDC", "CBBBC CCCCC CDDDC CDDDC", "CDDDC CDDDC CDDDC CCCCC", "CDDDC CDDDC CCCCC      ", "CCCCC CDDDC            ", "      CDDDC            ", "      CCCCC            ", "                       ")
                    .aisle
                    .aisle
                    .aisle("                       ", "        G     G        ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("C   C  IIIIIIIII       ", "CCCCC  IGIIIIIGI       ", "CDDDC  IIIIIIIII       ", "CDDDC  IIIIIIIII       ", "CDDDC  IIIIIIIII       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("       IKKKKKKKI       ", "CDDDC  I       I       ", "D   D  I       I       ", "D   D  I       I       ", "D   D  IIIIIIIII       ", " DDD     I   I         ", "         I   I         ", "         I   I         ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("       IKKKKKKKI       ", "CDDDC  I       I       ", "D   D  I       I       ", "D   D  I       I       ", "D   D  IIEIIIEII       ", " DDD    IEI IEI        ", "        IEI IEI        ", "        IHI IHI        ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("       IKKKKKKKI       ", "CDDDC  I       I       ", "D   D  I       I       ", "D   D  I       I       ", "D   D  IIIIIIIII       ", " DDD     I   I         ", "         I   I         ", "         I   I         ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("       IILLLLLII       ", "CDDDC  IILLMLLII       ", "D   D  IILLLLLII       ", "D   D  IIIIIIIII       ", "D   D  IIIIIIIII       ", " DDD                   ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("                       ", "CDDDC                  ", "D   D                  ", "D   D                  ", "D   D                  ", " DDD                   ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("C   C                  ", "CCCCC                  ", "CDNDC                  ", "CDNDC                  ", "CDDDC                  ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .where("M", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("I", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where("N", Predicates.blocks(GTBlocks.HERMETIC_CASING_HV.get()))
                    .where("J", Predicates.blocks(GTBlocks.CASING_STAINLESS_EVAPORATION.get()))
                    .where("E", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .where("L", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(6).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("H", Predicates.abilities(PartAbility.MUFFLER))
                    .where("D", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where("G", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("K", Predicates.blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where("A", Predicates.blocks(GTBlocks.CASING_ALUMINIUM_FROSTPROOF.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/electric_blast_furnace"))
            .register();

    public final static MultiblockMachineDefinition DESULFURIZER = REGISTRATE.multiblock("desulfurizer", WorkableElectricParallelHatchMultipleRecipesMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.DESULFURIZER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.desulfurizer")))
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("CCCCCIIIIIII", "CCCCCILILILI", "CCCCCILILILI", "            ", "            ", "            ")
                    .aisle("CCCCCIIIIIII", "CGCCCXXXXXXI", "CCCCCILILILI", "  CCCILILILI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGGGGILILILI", "CCCCCILILILI", "  CXXXXXXXXI", "  CCCIIIIIII", "            ")
                    .aisle("CCDDDIIIIIII", "CGDPDXXXXXXI", "CCDDDILILILI", "  DDDILILILI", "  DDDIIIIIII", "  DDD       ")
                    .aisle("CCCCCIIIIIII", "CCDPDILILILI", "CCDPDILILILI", "  DPD       ", "  DPD       ", "  DDD       ")
                    .aisle("  DDD       ", "  D~D       ", "  DDD       ", "  DDD       ", "  DDD       ", "  DDD       ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("I", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where("X", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("P", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("G", Predicates.blocks(GTBlocks.HERMETIC_CASING_MV.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(40)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, false, true)))
                    .where("L", Predicates.blocks(GTBlocks.COIL_KANTHAL.get()))
                    .where("C", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition LIQUEFACTION_FURNACE = REGISTRATE.multiblock("liquefaction_furnace", CoilWorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.liquefaction_furnace")))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTLRecipeTypes.LIQUEFACTION_FURNACE_RECIPES)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAS", "BBEBB", "ACFCA")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .where("B", Predicates.heatingCoils())
                    .where("C", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("A", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .setMinGlobalLimited(20)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, false, true)))
                    .where("F", Predicates.abilities(PartAbility.MUFFLER))
                    .where('S', Predicates.controller(Predicates.blocks(definition.get())))
                    .where(' ', Predicates.any())
                    .build())
            .beforeWorking((machine, recipe) -> machine instanceof CoilWorkableElectricMultiblockMachine coilMachine && coilMachine.getCoilType().getCoilTemperature() >= recipe.data.getInt("ebf_temp"))
            .additionalDisplay(GTLMachines.TEMPERATURE)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/multi_furnace"))
            .register();

    public final static MultiblockMachineDefinition REACTION_FURNACE = REGISTRATE.multiblock("reaction_furnace", CoilWorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.reaction_furnace")))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTLRecipeTypes.REACTION_FURNACE_RECIPES)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("     ", "~BBBB", "CCCCC", "BCCCB", "BAFAB")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where("C", Predicates.heatingCoils())
                    .where("D", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("B", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(20)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, false, true)))
                    .where("F", Predicates.abilities(PartAbility.MUFFLER))
                    .where(' ', Predicates.any())
                    .build())
            .beforeWorking((machine, recipe) -> machine instanceof CoilWorkableElectricMultiblockMachine coilMachine && coilMachine.getCoilType().getCoilTemperature() >= recipe.data.getInt("ebf_temp"))
            .additionalDisplay(GTLMachines.TEMPERATURE)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/electric_blast_furnace"))
            .register();

    public final static MultiblockMachineDefinition MEGA_BREWER = REGISTRATE.multiblock("mega_brewer", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.brewery"), Component.translatable("gtceu.fermenter")))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.BREWING_RECIPES, GTRecipeTypes.FERMENTING_RECIPES)
            .appearanceBlock(GCyMBlocks.CASING_CORROSION_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("     I   I     ", "     I   I     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     IIIII     ", "     JJJJJ     ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    IIIIIII    ", "    JJ   JJ    ", "    JJ G JJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("   IIIIIIIII   ", "   JJECCCEJJ   ", "   JJECGCEJJ   ", "    JJCCCJJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("  IIIIIIIIIII  ", "  JJE     EJJ  ", "  JJE  G  EJJ  ", "   JJ     JJ   ", "    JJJJJJJ    ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("IIIIIIIIIIIIIII", "IJJE       EJJI", "IJJE   G   EJJI", " IJJ       JJI ", "  IJJJJJJJJJI  ", "   IIBBBBBII   ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle(" IIIIIIIIIIIII ", " J C       C J ", " J C   G   C J ", "  JC  CCC  CJ  ", "   JJJBBBJJJ   ", "     BBBBB     ", "      BBB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle(" IIIIIIIIIIIII ", " J C       C ~ ", " JGGGGGGGGGGGJ ", "  JC  CGC  CJ  ", "   JJJBGBJJJ   ", "     BBGBB     ", "      BBB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle(" IIIIIIIIIIIII ", " J C       C J ", " J C   G   C J ", "  JC  CCC  CJ  ", "   JJJBBBJJJ   ", "     BB BB     ", "      BBB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("IIIIIIIIIIIIIII", "IJJE       EJJI", "IJJE   G   EJJI", " IJJ       JJI ", "  IJJJJJJJJJI  ", "   IIBB BBII   ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("  IIIIIIIIIII  ", "  JJE     EJJ  ", "  JJE  G  EJJ  ", "   JJ     JJ   ", "    JJJJJJJ    ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("   IIIIIIIII   ", "   JJECCCEJJ   ", "   JJECGCEJJ   ", "    JJCCCJJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    IIIIIII    ", "    JJ   JJ    ", "    JJ G JJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     IIIII     ", "     JJJJJ     ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     I   I     ", "     I   I     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     AAAAA     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     CCCCC     ", "     A   A     ", "               ", "               ")
                    .aisle("   DAAAAAAAD   ", "   DBBBBBBBD   ", "   DBBEEEBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DCCCCCCCD   ", "     BBBBB     ", "     A   A     ", "               ")
                    .aisle("  DAAAAAAAAAD  ", "  DBBBBBBBBBD  ", "  DBBEFCFEBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DCCCCCCCCCD  ", "    BB   BB    ", "     BBBBB     ", "     A   A     ")
                    .aisle("  AAAAAAAAAAA  ", "  BBBBBBBBBBB  ", "  BBECFCFCEBB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  CCCCCCCCCCC  ", "   BBB   BBB   ", "    BBBBBBB    ", "     A   A     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BBECCFCFCCEBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " CCCCCCCCCCCCC ", " ABBBEEEEEBBBA ", "  ABBBBBBBBBA  ", "   AAABBBAAA   ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BEFFFFFFFFFEB ", " B           B ", " B           B ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " CCCCC   CCCCC ", "  B  EEEEE  B  ", "   BBB   BBB   ", "     BBBBB     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BECCCFGFCCCEB ", " B     G     B ", " B     G     B ", " B     G     B ", " B     G     B ", " B     G     B ", " BF    G    FB ", " BGGGGGGGGGGGB ", " BF    G    FB ", " B     G     B ", " B     G     B ", " B     G     B ", " BF    G    FB ", " BGGGGGGGGGGGB ", " BF    G    FB ", " B     G     B ", " CCCCC G CCCCC ", "  B  EEGEE  B  ", "   BBB G BBB   ", "     BBBBB     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BEFFFFFFFFFEB ", " B           B ", " B           B ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " CCCCC   CCCCC ", "  B  EEEEE  B  ", "   BBB   BBB   ", "     BBBBB     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BBECCFCFCCEBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " CCCCCCCCCCCCC ", " ABBBEEEEEBBBA ", "  ABBBBBBBBBA  ", "   AAABBBAAA   ")
                    .aisle("  AAAAAAAAAAA  ", "  BBBBBBBBBBB  ", "  BBECFCFCEBB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  CCCCCCCCCCC  ", "   BBB   BBB   ", "    BBBBBBB    ", "     A   A     ")
                    .aisle("  DAAAAAAAAAD  ", "  DBBBBBBBBBD  ", "  DBBEFCFEBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DCCCCCCCCCD  ", "    BB   BB    ", "     BBBBB     ", "     A   A     ")
                    .aisle("   DAAAAAAAD   ", "   DBBBBBBBD   ", "   DBBEEEBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DCCCCCCCD   ", "     BBBBB     ", "     A   A     ", "               ")
                    .aisle("     AAAAA     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     CCCCC     ", "     A   A     ", "               ", "               ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where("C", Predicates.blocks(GTLBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where("D", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTLMaterials.HastelloyN)))
                    .where("E", Predicates.blocks(GTLBlocks.HERMETIC_CASING_UEV.get()))
                    .where("F", Predicates.heatingCoils())
                    .where("G", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("H", Predicates.blocks(GTLBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where("I", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where("J", Predicates.blocks(GCyMBlocks.CASING_CORROSION_PROOF.get())
                            .setMinGlobalLimited(160)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1)))
                    .where(' ', Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/corrosion_proof_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public final static MultiblockMachineDefinition FUEL_REFINING_COMPLEX = REGISTRATE.multiblock("fuel_refining_complex", CoilWorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.fuel_refining")))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTLRecipeTypes.FUEL_REFINING_RECIPES)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("      aaaaa      ", "       a~a       ", "       aaa       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("     AAAAAAA     ", "     ADDDDDA     ", "     ADDDDDA     ", "     ADDDDDA     ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle(" AAAAAAAAAAAAAAA ", " KKK DDDDDDD KKK ", " KKK D     D KKK ", " KKK D     D KKK ", " KKK DD   DD KKK ", " KKK  DDDDD  KKK ", "       DDD       ", "       DDD       ", "        D        ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "KKKKKDDDDDDDKKKKK", "K   KD     DK   K", "K   KD     DK   K", "K   KD     DK   K", "KKKKKDDD DDDKKKKK", " FFF  DD DD  FFF ", "      DD DD      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "KKKKKDDDDDDDKKKKK", "K   KD     DK   K", "K   KD     DK   K", "K   KD     DK   K", "KK KKDD   DDKK KK", " LJL  D   D  LJL ", "  J   D   D   J  ", "  J   LJDJL   J  ", "  J    J J    J  ", "  JJJJJJ JJJJJJ  ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "KKKKKDDDDDDDKKKKK", "K   KD     DK   K", "K   KD     DK   K", "K   KD     DK   K", "KKKKKDDD DDDKKKKK", " FFF  DD DD  FFF ", "      DD DD      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", " KKK DDDDDDD KKK ", " KKK D     D KKK ", " KKK D     D KKK ", " KKK DD   DD KKK ", " KKK  DDDDD  KKK ", "       DDD       ", "       DJD       ", "        D        ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "                 ", "        J        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBJBBB  DD ", " DD   BCCCB   DD ", " DD   BBBBB   DD ", " DD   BBBBB   DD ", " DD    BBB    DD ", "       BBB       ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "DDDDBB CEC BBDDDD", "DDDDBB C C BBDDDD", "DDDDBB C C BBDDDD", "DDDDBB C C BBDDDD", "DDDDBB C C BBDDDD", "DDDDBBBCECBBBDDDD", "DDDD FBCECBF DDDD", "DDDD FBBEBBF DDDD", "DDDD FBBEBBF DDDD", "DDDD FBBEBBF DDDD", "FFFFFFBBEBBFFFFFF", "       BBB       ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "I  DB  CEC  BD  I", "D  DB   E   BD  D", "I  DB   E   BD  I", "D  DB   E   BD  D", "I  DBG  E  GBD  I", "D  DBHB E BHBD  D", "I  D  BC CB  D  I", "D  D  B   B  D  D", "I  D  B   B  D  I", "DDDD  B   B  DDDD", "     FB E BF     ", "      BB BB      ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "D  DB  CEC  BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DBG     GBD  D", "D  DBHB E BHBD  D", "D  D  BC CB  D  D", "D  D  B   B  D  D", "D  D  B   B  D  D", "DDDD  B   B  DDDD", "     FB E BF     ", "      BB BB      ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "D  DB  CEC  BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DBG     GBD  D", "D  DBHB E BHBD  D", "D  D  BC CB  D  D", "D  D  B   B  D  D", "D  D  B   B  D  D", "DDDD  B   B  DDDD", "     FB E BF     ", "      BB BB      ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "DDDDB  CEC  BDDDD", "DDDDB   E   BDDDD", "DDDDB   E   BDDDD", "DDDDB   E   BDDDD", "DDDDBG  E  GBDDDD", "DDDDBHB E BHBDDDD", "DDDD  BC CB  DDDD", "DDDD  B   B  DDDD", "DDDD  B   B  DDDD", "DDDD  B   B  DDDD", "FFFFFFB E BFFFFFF", "      BB BB      ")
                    .aisle(" AAAAAAAAAAAAAAA ", " DDABBBBBBBBBADD ", " DDABB CEC BBADD ", " DDABB C C BBADD ", " DD BB C C BB DD ", " DD BB C C BB DD ", " DD BB C C BB DD ", " DD BBB ECBBB DD ", " DD  FBCECBF  DD ", " DD  FBBEBBF  DD ", " DD  FBBEBBF  DD ", " DD  FBBEBBF  DD ", "     FBBEBBF     ", "       BBB       ")
                    .aisle("  AAAAAAAAAAAAA  ", "  AAABBBBBBBAAA  ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "      BCCCB      ", "      BBBBB      ", "      BBBBB      ", "       BBB       ", "       BBB       ", "                 ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where("B", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where("C", Predicates.heatingCoils())
                    .where("D", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("F", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where("G", Predicates.blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where("H", Predicates.blocks(GCyMBlocks.ELECTROLYTIC_CELL.get()))
                    .where("I", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("J", Predicates.blocks(GCyMBlocks.CASING_WATERTIGHT.get()))
                    .where("K", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where("L", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("a", Predicates.blocks(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1)))
                    .where(' ', Predicates.any())
                    .build())
            .beforeWorking((machine, recipe) -> machine instanceof CoilWorkableElectricMultiblockMachine coilMachine && coilMachine.getCoilType().getCoilTemperature() >= recipe.data.getInt("ebf_temp"))
            .workableCasingRenderer(GTLCore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public final static MultiblockMachineDefinition WATER_PURIFICATION_PLANT = REGISTRATE.multiblock("water_purification_plant", WaterPurificationPlantMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.water_purification_plant_9.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.HIGH_STRENGTH_CONCRETE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAA", "CEEEEEC", "CEFFFEC", "CEEEEEC", "CCCCCCC", "       ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " B   B ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "E      ", "F      ", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CGC  ", "  CGC  ", "  CGC  ", "  CGC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " BBCBB ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "CEEEEEC", "CEEEEEC", "CEEEEEC", "CCCCCCC", "  BCB  ", "       ", "       ", "       ")
                    .aisle("AAA~AAA", "  BCB  ", "  BCB  ", "  BCB  ", "  BCB  ", "  BCB  ", "       ", "       ", "       ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where("C", Predicates.blocks(GTLBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where("F", Predicates.blocks(GTLBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where("G", Predicates.fluids(Fluids.WATER))
                    .where("A", Predicates.blocks(GTLBlocks.HIGH_STRENGTH_CONCRETE.get())
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setExactLimit(1)))
                    .where("E", Predicates.blocks(GTLBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/module_base/side"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition CLARIFIER_PURIFICATION_UNIT = REGISTRATE.multiblock("clarifier_purification_unit", ClarifierPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.clarifier_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.clarifier_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.clarifier_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.clarifier_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.clarifier_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.clarifier_purification_unit_6.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("   AAAAA   ", "   AAAAA   ", "   AAAAA   ", "           ")
                    .aisle("  AAAAAAA  ", "  AEEEEEA  ", "  A     A  ", "           ")
                    .aisle(" AAAAAAAAA ", " AEEEEEEEA ", " A       A ", "           ")
                    .aisle("AAAAFFFAAAA", "AEEEGGGEEEA", "A         A", "           ")
                    .aisle("AAAFFFFFAAA", "AEEGEEEGEEA", "A         A", "    GGG    ")
                    .aisle("AAAFFFFFAAA", "HEEGEIEGEEJ", "A    I    A", "GGGGGIG    ")
                    .aisle("AAAFFFFFAAA", "AEEGEEEGEEA", "A         A", "    GGG    ")
                    .aisle(" AAAFFFAAA ", " AEEGGGEEA ", " A       A ", "           ")
                    .aisle("  AAAAAAA  ", "  AEEEEEA  ", "  A     A  ", "           ")
                    .aisle("   AAAAA   ", "   AEEEA   ", "   A   A   ", "           ")
                    .aisle("    AAA    ", "    B~D    ", "    AAA    ", "           ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.abilities(PartAbility.IMPORT_ITEMS))
                    .where("H", Predicates.abilities(PartAbility.IMPORT_FLUIDS))
                    .where("J", Predicates.abilities(PartAbility.EXPORT_FLUIDS))
                    .where("E", Predicates.fluids(Fluids.WATER))
                    .where("F", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .where("G", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where("A", Predicates.blocks(GTLBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where("D", Predicates.abilities(PartAbility.EXPORT_ITEMS))
                    .where("I", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/reinforced_sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition OZONATION_PURIFICATION_UNIT = REGISTRATE.multiblock("ozonation_purification_unit", OzonationPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ozonation_purification_unit_7.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.OZONE_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("     AAA ", "     AAA ", "     AAA ", "     AAA ", "     AAA ", "     AAA ", "      A  ", "      A  ", "         ", "         ")
                    .aisle("C   AAAAA", "C   A   A", "C   A   A", "EEEEA   A", "EDDEA   A", "EEEEA   A", "     A A ", "     A A ", "      A  ", "      A  ")
                    .aisle("    AAAAA", "  FFA   A", "  F A   A", "EEEEA   A", "E  EA   A", "EDDEA   A", "    A   A", "    A   A", "     A A ", "     AAA ")
                    .aisle("C   AAAAA", "C   A D A", "C   A D A", "EEEEA D A", "EDDEA   A", "EEEEA   A", "     A A ", "     A A ", "      A  ", "      A  ")
                    .aisle("     A~A ", "     A A ", "     A A ", "     A A ", "     AAA ", "     AAA ", "      A  ", "      A  ", "         ", "         ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("E", Predicates.blocks(GTLBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where("A", Predicates.blocks(GTLBlocks.OZONE_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSE)))
                    .where("D", Predicates.blocks(GTLBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where("F", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/ozone_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition FLOCCULATION_PURIFICATION_UNIT = REGISTRATE.multiblock("flocculation_purification_unit", FlocculationPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_9.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.flocculation_purification_unit_a.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.FLOCCULATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("HH     HH", "HH     HH", "HH     HH", "HH     HH")
                    .aisle("HAAAAAAAH", "HAAAAAAAH", "HAAAAAAAH", "HGG   GGH")
                    .aisle(" ACCCCCA ", " AGDDDGA ", " AG   GA ", " GG   GG ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A     A ", "         ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A     A ", "         ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A     A ", "         ")
                    .aisle(" ACCCCCA ", " ADDDDDA ", " A     A ", "         ")
                    .aisle(" AAAAAAA ", " AAA~AAA ", " AAAAAAA ", "         ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.FLOCCULATION_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("H", Predicates.blocks(GTLBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where("F", Predicates.blocks(GTLBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where("D", Predicates.fluids(Fluids.WATER))
                    .where("E", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .where("G", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where("C", Predicates.blocks(GTLBlocks.FLOCCULATION_CASING.get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/flocculation_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition PH_NEUTRALIZATION_PURIFICATION_UNIT = REGISTRATE.multiblock("ph_neutralization_purification_unit", PHNeutralizationPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_9.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_a.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_b.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.ph_neutralization_purification_unit_c.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("ABBBA     ABBBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABBBA     ABBBA", "A   A     A   A")
                    .aisle("BBBBB     BBBBB", "B   BGDDDDB   B", "B   B     B   B", "B   B     B   B", "B   B     B   B", " BBB       BBB ")
                    .aisle("BBBBBDDDDDBBBBB", "C             C", "C   BDDDDDB   C", "C   B     B   C", "B   B     B   B", " BFB       BGB ")
                    .aisle("BBBBB     BBBBB", "B   BDD~DDB   B", "B   B     B   B", "B   B     B   B", "B   B     B   B", " BBB       BBB ")
                    .aisle("ABBBA     ABBBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABBBA     ABBBA", "A   A     A   A")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where("F", Predicates.abilities(PartAbility.IMPORT_ITEMS))
                    .where("G", Predicates.abilities(PartAbility.IMPORT_FLUIDS))
                    .where("B", Predicates.blocks(GTLBlocks.OZONE_CASING.get()))
                    .where("C", Predicates.blocks(GTLBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where("D", Predicates.blocks(GTLBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING.get())
                            .or(Predicates.blocks(GTLMachines.PH_SENSOR.getBlock()).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/stabilized_naquadah_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition EXTREME_TEMPERATURE_FLUCTUATION_PURIFICATION_UNIT = REGISTRATE.multiblock("extreme_temperature_fluctuation_purification_unit", ExtremeTemperatureFluctuationPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_9.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_a.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.extreme_temperature_fluctuation_purification_unit_b.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("CDDDC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CDDDC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("IFFFDDDDAAAAAAAAAAAAAAA", " GHG    A             A", " GHGDDDDA             A", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG      A         A  ", " GHG      A         A  ", "BDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("CD~DC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("H", Predicates.blocks(GTLBlocks.SPEEDING_PIPE.get()))
                    .where("I", Predicates.blocks(GTLMachines.HEAT_SENSOR.getBlock()))
                    .where("B", Predicates.abilities(PartAbility.IMPORT_FLUIDS))
                    .where("E", Predicates.abilities(PartAbility.EXPORT_FLUIDS))
                    .where("F", Predicates.blocks(GTLBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where("G", Predicates.blocks(GTLBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where("D", Predicates.blocks(GTLBlocks.PLASMA_HEATER_CASING.get()))
                    .where("A", Predicates.blocks(GTLBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition HIGH_ENERGY_LASER_PURIFICATION_UNIT = REGISTRATE.multiblock("high_energy_laser_purification_unit", HighEnergyLaserPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_9.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.high_energy_laser_purification_unit_a.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("     BBB     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CD         DC", " D         D ", " D         D ", " D         D ", " D         D ", " D         D ", "CAEEEEEEEEEAC", "BAAAAAFAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle("     B~B     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("E", Predicates.blocks(GTLBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where("F", Predicates.blocks(GTLMachines.LENS_HOUSING.getBlock()))
                    .where("D", Predicates.blocks(GTLBlocks.ELECTRON_PERMEABLE_NEUTRONIUM_COATED_GLASS.get()))
                    .where("A", Predicates.blocks(GTLBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(Predicates.blocks(GTLMachines.LENS_INDICATOR_HATCH.getBlock()).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition RESIDUAL_DECONTAMINANT_DEGASSER_PURIFICATION_UNIT = REGISTRATE.multiblock("residual_decontaminant_degasser_purification_unit", ResidualDecontaminantDegasserPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_9.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_a.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_b.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_c.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_d.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_e.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_f.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_g.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_h.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_i.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_j.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.residual_decontaminant_degasser_purification_unit_k.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle
                    .aisle("    AAAAAAAAA    ", "      AAAAABB    ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "      AAAAAA     ", "    AAAAAAAAA    ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "    B   D        ", "                 ", "            B    ", "                 ", "                 ", "                 ", "                 ", "                 ", "    B            ", "                 ", "            B    ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "   BB DDDDD      ", "    AAAAAAAAAB   ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "    DD     DD B  ", "  BAAAAAAAAAAA   ", "  AAAAAAAAAAAAA  ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D B  ", "    DD     DD    ", "  B  DD   DD     ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "       DDD    B  ", "      DDDDD      ", "  B  DD   DD     ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         DB  ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      D   D      ", "       DDD       ", "                 ", "       DDD     B ", "      D   D      ", "     D     D     ", "    D       D    ", " B  D       D    ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      DDDDD      ", "       DDD     B ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", " B D         D   ", "   D         D   ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", " B  D       D    ", "     DD   DD     ", "      DDDDD    B ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", " B D         D   ", "  D           D  ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   DD   DD   B ", "      DD DD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D  B ", "     DD   DD     ", " B    DDDDD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         D B ", "  D           D  ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      DDDDD      ", " B     DDD       ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D B ", "   D         D   ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      D   D      ", "       DDD       ", "                 ", " B     DDD       ", "      D   D      ", "     D     D     ", "    D       D    ", "    D       D  B ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "  B D       D    ", "    DD     DD    ", "     DD   DD  B  ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "  B    DDD       ", "      DDDDD      ", "     DD   DD  B  ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  BD         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "  B DD     DD    ", "   AAAAAAAAAAAB  ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "        D   B    ", "                 ", "    B            ", "                 ", "                 ", "                 ", "                 ", "                 ", "            B    ", "                 ", "    B            ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "      DDDDD BB   ", "   BAAAAAAAAA    ", "  AAAAAAAAAAAAA  ")
                    .aisle("    AAAAAAAAA    ", "    BBAA~AA      ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "      AAAAA      ", "    AAAAAAAAA    ")
                    .aisle
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("D", Predicates.blocks(GTLBlocks.OMNI_PURPOSE_INFINITY_FUSED_GLASS.get()))
                    .where("A", Predicates.blocks(GTLBlocks.PLASMA_HEATER_CASING.get()))
                    .where("C", Predicates.blocks(GTLBlocks.PLASMA_HEATER_CASING.get())
                            .or(Predicates.blocks(GTLMachines.DEGASSING_CONTROL_HATCH.getBlock()).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition ABSOLUTE_BARYONIC_PERFECTION_PURIFICATION_UNIT = REGISTRATE.multiblock("absolute_baryonic_perfection_purification_unit", AbsoluteBaryonicPerfectionPurificationUnitMachine::new)
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_1.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_2.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_3.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_4.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_5.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_6.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_7.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_8.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_9.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.absolute_baryonic_perfection_purification_unit_a.tooltip"))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .appearanceBlock(GTLBlocks.QUARK_EXCLUSION_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", " CCCCCAAAAACCCCC ", " C    DEFED    C ", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", "AAD   AEFEA   DAA", "AAEEEEE F EEEEEAA", "AAFFFFFFFFFFFFFAA", "AAEEEEE F EEEEEAA", "AAD   AEFEA   DAA", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", " C    DEFED    C ", " CCCCCAAAAACCCCC ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      BBBBB      ", "      BBBBB      ", "      BB~BB      ", "      BBBBB      ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where("D", Predicates.blocks(GTLBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where("E", Predicates.blocks(GTLBlocks.NON_PHOTONIC_MATTER_EXCLUSION_GLASS.get()))
                    .where("F", Predicates.blocks(GTLBlocks.QUARK_PIPE.get()))
                    .where("A", Predicates.blocks(GTLBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.QUARK_EXCLUSION_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/quark_exclusion_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();
}
